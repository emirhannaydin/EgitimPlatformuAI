//
//  SpeakingScreenViewController.swift
//  EgitimPlatformuAI
//
//  Created by BaÅŸar Noyan on 28.04.2025.
//

import UIKit
import AVFoundation
import Lottie

final class SpeakingScreenViewController: UIViewController {
    

    @IBOutlet var backButton: CustomBackButtonView!
    @IBOutlet var speakingLottie: LottieAnimationView!
    @IBOutlet var questionCount: UILabel!
    @IBOutlet var questionLabel: UILabel!
    @IBOutlet var speakingLabel: UILabel!
    @IBOutlet var speakButton: UIButton!
    @IBOutlet var hearingYouLabel: UILabel!
    @IBOutlet var successRateLabel: UILabel!
    @IBOutlet var speaksView: UIView!
    @IBOutlet var speaksLeftLabel: UILabel!
    @IBOutlet var checkButton: UIButton!
    @IBOutlet var customContinueView: CustomContinueView!
    @IBOutlet var iconImageView: UIImageView!
    @IBOutlet var speakingActivity: UIActivityIndicatorView!
    @IBOutlet var listeningButton: UIButton!
    
    private let recorder = AudioRecorderManager()
    var viewModel: SpeakingScreenViewModel!
    private var questions: [Speaking] = []
    private var isMicButtonClicked = false
    private var isListeningsButtonClicked = false
    private var speaksLeftCount: Int = 3
    private var isRecording = false
    private var currentIndex: Int = 0
    private var tts: TextToSpeech = TextToSpeech()


    override func viewDidLoad() {
        super.viewDidLoad()
        setLottie()
        setSpeakingButton()
        setListeningButton()
        setNotification()
        questions = [
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "BugÃ¼n sabah erkenden uyandÄ±m ve kahvaltÄ± hazÄ±rladÄ±m. Kahvemi iÃ§erken biraz kitap okumak istedim. Hava gÃ¼neÅŸli olduÄŸu iÃ§in dÄ±ÅŸarÄ± Ã§Ä±kÄ±p yÃ¼rÃ¼yÃ¼ÅŸ yapmaya karar verdim. Parkta yÃ¼rÃ¼rken kuÅŸ seslerini duymak beni Ã§ok rahatlattÄ±. Eve dÃ¶nerken markete uÄŸrayÄ±p birkaÃ§ alÄ±ÅŸveriÅŸ yaptÄ±m. Ã–ÄŸleden sonra bilgisayarÄ±mÄ± aÃ§Ä±p ders Ã§alÄ±ÅŸmaya baÅŸladÄ±m. Yeni konularÄ± Ã¶ÄŸrenmek hem heyecan verici hem de biraz zorlayÄ±cÄ±ydÄ±. AkÅŸam yemeÄŸini ailemle birlikte yedik ve gÃ¼nÃ¼mÃ¼zÃ¼ birbirimize anlattÄ±k. YemeÄŸin ardÄ±ndan biraz televizyon izledim ve dinlendim. Åžimdi ise yatma vakti geldi, yarÄ±n iÃ§in erken kalkmam gerekiyor.",
                level: "A1"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "Saat 7â€™de uyanÄ±rÄ±m. KahvaltÄ± yaparÄ±m, sonra okula giderim. Okuldan sonra Ã¶devimi yapar ve televizyon izlerim.",
                level: "A1"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "Kitap okumaktan, mÃ¼zik dinlemekten ve ailemle arkadaÅŸlarÄ±mla vakit geÃ§irmekten hoÅŸlanÄ±rÄ±m.",
                level: "A2"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "En sevdiÄŸim tatil YÄ±lbaÅŸÄ± Gecesi. Genellikle aileyle bir araya geliriz, birlikte akÅŸam yemeÄŸi yeriz ve gece yarÄ±sÄ± havai fiÅŸek izleriz.",
                level: "A2"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "En unutulmaz deneyimlerimden biri ortaokulda bir bilim yarÄ±ÅŸmasÄ±nÄ± kazanmaktÄ±. Bu bana Ã¶zgÃ¼ven verdi ve daha Ã§ok Ã§alÄ±ÅŸmamÄ± saÄŸladÄ±.",
                level: "B1"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "Sosyal medya insanlarÄ±n baÄŸlantÄ±da kalmasÄ±na ve fikirlerini paylaÅŸmasÄ±na yardÄ±mcÄ± olur. Ancak dikkat daÄŸÄ±nÄ±klÄ±ÄŸÄ±na ve yÃ¼z yÃ¼ze iletiÅŸimin azalmasÄ±na da yol aÃ§abilir.",
                level: "B1"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "Teknoloji Ã¶ÄŸrenmeyi destekleyebilirken, Ã¶ÄŸretmenlerin Ã¶ÄŸrencileri yÃ¶nlendirme ve motive etme konusunda Ã§ok Ã¶nemli bir rolÃ¼ olduÄŸunu dÃ¼ÅŸÃ¼nÃ¼yorum; makineler bunu tamamen yerine getiremez.",
                level: "B2"
            ),
            Speaking(
                question: "Please speak the text below",
                speakingLabel: "Vejetaryen olmak karbon salÄ±mÄ±nÄ± azaltabilir, ancak herkes bu yaÅŸam tarzÄ±nÄ± benimseyemez ya da istemeyebilir. Dengeli ve uygulanabilir Ã§Ã¶zÃ¼mler bulmak Ã¶nemlidir.",
                level: "B2"
            )
        ]
        loadCurrentQuestion()

    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        viewModel.stopSpeaking()

    }
    
    private func setNotification(){
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(onSpeechEnd),
            name: .aiSpeechFinished,
            object: nil
        )
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(onSpeechReady),
            name: .aiSpeechDidStart,
            object: nil
        )
    }
    
    @objc private func onSpeechEnd() {
        listeningButton.setImage(UIImage(systemName: "speaker"), for: .normal)
        isListeningsButtonClicked = false
    }
    @objc private func onSpeechReady() {
        speakingActivity.stopAnimating()
        setSpeakingActivityHidden()
    }
    private func loadCurrentQuestion(){
        questionLabel.text = questions[currentIndex].question
        speakingLabel.text = questions[currentIndex].speakingLabel
    }
    private func setSpeakingActivityHidden(){
        speakingActivity.alpha = 0
        speakingActivity.isUserInteractionEnabled = false
    }
    
    private func setListeningButton(){
        listeningButton.setImage(UIImage(systemName: "speaker"), for: .normal)
        listeningButton.tintColor = .mintGreen
    }
    
    private func setLottie(){
        let animation = LottieAnimation.named("speakingScreenGreen")
        speakingLottie.animation = animation
        speakingLottie.contentMode = .scaleAspectFit
        speakingLottie.loopMode = .loop
        speakingLottie.stop()
        backButton.backButton.addTarget(self, action: #selector(backButtonTapped), for: .touchUpInside)
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(speaksViewTapped))
        speaksView.addGestureRecognizer(tapGesture)

    }
    
    private func setSpeakingButton(){
        let largeConfig = UIImage.SymbolConfiguration(pointSize: 50, weight: .regular)
        let micImage = UIImage(systemName: "microphone", withConfiguration: largeConfig)
        speakButton.setImage(micImage, for: .normal)
        speakButton.tintColor = .mintGreen
        
    }
    
    @objc func backButtonTapped(){
        navigationController?.popViewController(animated: true)
    }

    @objc func speaksViewTapped(){
        handleSpeaks()
    }

    @IBAction func speakButton(_ sender: Any) {
        handleSpeaks()
    }
    
    private func handleSpeaks(){
        isMicButtonClicked.toggle()
            if isMicButtonClicked {
                if speaksLeftCount > 0 {
                    let largeConfig = UIImage.SymbolConfiguration(pointSize: 50, weight: .regular)
                    let micImage = UIImage(systemName: "microphone.fill", withConfiguration: largeConfig)
                    
                    speakButton.setImage(micImage, for: .normal)
                    speakButton.tintColor = .summer
                    hearingYouLabel.text = "ðŸŽ¤ We're listening... keep going!"
                    hearingYouLabel.textColor = .summer
                    speaksLeftCount -= 1
                    speaksLeftLabel.text = "Speaks Left:\(speaksLeftCount)"
                    let animation = LottieAnimation.named("speakingScreen")
                    speakingLottie.animation = animation
                    speakingLottie.play()
                }else{
                    speaksLeftLabel.textColor = .red
                    animateLabelShake(speaksLeftLabel)
                }
            }else{
                setSpeakingButton()
                hearingYouLabel.text = "Tap to speaking..."
                speakButton.tintColor = .mintGreen
                hearingYouLabel.textColor = .mintGreen
                setLottie()

            }
    }
    @IBAction func checkButton(_ sender: Any) {
        customContinueView.isHidden = false
        checkButton.isHidden = true
        listeningButton.setImage(UIImage(systemName: "speaker"), for: .normal)
        speakingActivity.stopAnimating()
        setSpeakingActivityHidden()
        viewModel.stopSpeaking()

        customContinueView.animateIn()
        customContinueView.continueButton.addTarget(self, action: #selector(nextQuestion), for: .touchUpInside)
    }
    
    @objc func nextQuestion(){
        customContinueView.isHidden = true
        checkButton.isHidden = false
        isListeningsButtonClicked = false
        isMicButtonClicked = false
        
        currentIndex += 1
        setListeningButton()
        loadCurrentQuestion()
        
        
    }
    @IBAction func listeningButtonClicked(_ sender: Any) {
        isListeningsButtonClicked.toggle()
        if isListeningsButtonClicked{
            listeningButton.setImage(UIImage(systemName: "speaker.fill"), for: .normal)
            speakingActivity.startAnimating()
            speakingActivity.alpha = 1
            
            viewModel.startSpeaking(text: questions[currentIndex].speakingLabel)
        }else{
            setListeningButton()
            speakingActivity.stopAnimating()
            setSpeakingActivityHidden()
            viewModel.stopSpeaking()

        }
    }
    
}
